{"version":3,"sources":["style.css","style.scss","_reset.scss","_fonts.scss","_globals.scss","susy/output/support/_rem.scss","susy/language/susy/_container.scss","susy/output/support/_clearfix.scss","_header.scss","_homepage.scss","_mixins.scss","_variables.scss","_footer.scss","susy/output/shared/_direction.scss"],"names":[],"mappings":"AAAA;;;;;;;;;;;ECYE,2ZCXyZ,SAAU,eAAgB,aAAc,wBAAyB,SAAU,SAAU,CAAC,8EAA8E,aAAc,CAAC,KAAK,aAAc,CAAC,MAAM,eAAgB,CAAC,aAAa,WAAY,CAAC,oDAAoD,YAAa,CAAC,MAAM,yBAA0B,gBAAiB,CAAE,KCAtwB,mCAAqC,CACtC,oBAGC,eAAiB,CAClB,GAGC,eACA,iBAAmB,CACpB,GAGC,eACA,gBAAmB,CACpB,GAGC,iBACA,gBAAmB,CACpB,GAGC,mBACA,gBAAmB,CACpB,EAGC,mBACA,gBACA,cACA,iBAAmB,CACpB,KCrBG,mCACA,eAAiB,CACpB,EAGG,qBAAsB,CACzB,WCCG,iBAAA,iBAAA,iBCqDmE,CFnDvE,iBGTM,YACA,cACA,UAAY,CACb,sCHML,WCFI,cAAA,iBAAA,iBCqDmE,CFnDvE,iBGTM,YACA,cACA,UAAY,CACb,CHyBL,iBACC,UACA,gBAAkB,CAClB,iBAIA,aAAe,CACf,gBAIA,WACA,YACA,cACA,SACA,kBACA,WAAa,CACb,KAEI,UAAW,CAAG,aI3Df,mBACA,cAAe,CAClB,MAGG,SACA,SAAW,CACd,YCPG,eCmDc,CDpDlB,cAIQ,WACA,oBAAsB,CAL9B,oBAQY,aEPI,CFQP,iBAKL,oBCsCc,CDrCjB,OGdG,mBACA,mBACA,kBAAmB,CACtB,mBPeG,gBAAA,UQA4D,CDX/D,MAGG,mBACA,eACA,kBFuCc,CE1ClB,QAMQ,kBACA,WACA,SACA,cAAgB,CACnB","file":"style.css","sourcesContent":["/*!\nTheme Name: Olympos\nDescription: Blank Wordpress Theme\nVersion: 3.0\nAuthor: Ivan Dorić\nAuthor URI: http://www.watch-learn.com/\nTags: starter theme, light, sass, gulp, livereload\n\n        The CSS, XHTML is released under GPL:\n        http://www.opensource.org/licenses/gpl-license.php\n\n*/html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}body{font-family:'Helvetica', sans-serif}h1,h2,h3,h4,h5,h6,p{line-height:1.5}h1{font-size:3rem;margin:1.875rem 0}h2{font-size:2rem;margin:1.25rem 0}h3{font-size:1.5rem;margin:1.25rem 0}h4{font-size:1.125rem;margin:1.25rem 0}p{font-size:1.125rem;line-height:1.8;color:#787f8c;margin:1.875rem 0}body{-webkit-font-smoothing:antialiased;background:#fff}*{box-sizing:border-box}.container{max-width:1100px;margin-left:auto;margin-right:auto}.container:after{content:\" \";display:block;clear:both}@media screen and (max-width: 1100px){.container{max-width:90%;margin-left:auto;margin-right:auto}.container:after{content:\" \";display:block;clear:both}}* html .clearfix{height:1%;overflow:visible}*+html .clearfix{min-height:1%}.clearfix:after{clear:both;content:\".\";display:block;height:0;visibility:hidden;font-size:0}.clr{clear:both}.main-header{background:#33363B;padding:20px 0}.logo{margin:0;width:10%}.video-list{margin-top:5rem}.video-list a{color:#666;text-decoration:none}.video-list a:hover{color:#FAB548}.video-list-item{margin-bottom:2.5rem}footer{margin-top:3.75rem;background:#E1E1E1;padding:20px 0 0 0}.mission-statement{width:32.20339%;float:left}.copy{background:#33363B;padding:20px 0;margin-top:3.75rem}.copy p{text-align:center;color:#fff;margin:0;font-size:11px}\n","/* CSS Document */\n/*!\nTheme Name: Olympos\nDescription: Blank Wordpress Theme\nVersion: 3.0\nAuthor: Ivan Dorić\nAuthor URI: http://www.watch-learn.com/\nTags: starter theme, light, sass, gulp, livereload\n\n        The CSS, XHTML is released under GPL:\n        http://www.opensource.org/licenses/gpl-license.php\n\n*/\n\n/* Vendor */\n@import \"susy\";\n@import \"su\";\n\n\n/* Setup */\n@import \"reset\";\n@import \"mixins\";\n@import \"variables\";\n@import \"fonts\";\n@import \"globals\";\n\n\n/* WP parts */\n@import \"header\";\n@import \"homepage\";\n@import \"sidebar\";\n@import \"footer\";\n","/* Eric Meyer's Reset CSS v2.0 - http://cssreset.com */\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}","body {\n  font-family: 'Helvetica', sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p {\n  line-height: 1.5;\n}\n\nh1 {\n  font-size: rem(48px);\n  margin: rem(30px) 0;\n}\n\nh2 {\n  font-size: rem(32px);\n  margin: rem(20px) 0;\n}\n\nh3 {\n  font-size: rem(24px);\n  margin: rem(20px) 0;\n}\n\nh4 {\n  font-size: rem(18px);\n  margin: rem(20px) 0;\n}\n\np {\n  font-size:rem(18px);\n  line-height: 1.8;\n  color: #787f8c;\n  margin: rem(30px) 0;\n}\n","/* =======================================================================\n## ++ Susy\n========================================================================== */\n\n$susy:(\n    container-position: center\n);\n\n/* =======================================================================\n## ++ Globals\n========================================================================== */\nbody{\n    -webkit-font-smoothing: antialiased;\n    background: #fff;\n}\n\n*{\n    box-sizing:border-box;\n}\n\n\n.container{\n    @include container(1100px);\n\n\n    //Media Queries\n    //-----------------\n        @include tablets{\n            @include container(90%);\n        }\n    //-----------------\n\n}\n\n\n/* =======================================================================\n## ++ Cleafix\n========================================================================== */\n\n/* float clearing for IE6 */\n* html .clearfix{\n height: 1%;\n overflow: visible;\n}\n\n/* float clearing for IE7 */\n*+html .clearfix{\n min-height: 1%;\n}\n\n/* float clearing for everyone else */\n.clearfix:after{\n clear: both;\n content: \".\";\n display: block;\n height: 0;\n visibility: hidden;\n font-size: 0;\n}\n\n.clr{clear:both;}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n",".main-header{\n    background: $darkgray;\n    padding:20px 0;\n}\n\n.logo{\n    margin:0;\n    width: 10%;\n}\n",".video-list{\n    margin-top: rem(80px);\n\n    a{\n        color:#666;\n        text-decoration: none;\n\n        &:hover{\n            color:$orange;\n        }\n    }\n}\n\n.video-list-item{\n    margin-bottom: rem(40px);\n}\n","/* =======================================================================\n## ++ Media Queries\n========================================================================== */\n\n/*\n    Used for media queries.\n    Add these mixins in your normal scss flow.\n\n    Eg.\n    .container{\n        width:1024px;\n\n        @include tablets{\n            width:90%;\n        }\n    }\n*/\n\n@mixin lowresmonitors{\n        @media screen and (max-width: 1350px){ @content;}\n}\n\n@mixin tablets{\n        @media screen and (max-width: 1100px){ @content; }\n}\n\n@mixin phones{\n        @media screen and (max-width: 720px){ @content; }\n}\n\n/* =======================================================================\n## ++ Unit transform\n========================================================================== */\n\n/*\n    Used for making containers have width in percentages.\n    Usage: define elemnt width in px and the width of parent elemnt in px.\n    eg. .block{width:cp(512px, 1024px)} this will result in .block{width:50%;}\n*/\n\n@function cp($target, $container) {\n    @return ($target / $container) * 100%;\n}\n\n/*\n    Used for making px values convert to rem values\n    Usage: define font-size in px and it will convert to rems\n    eg. font-size: rem(14px);\n*/\n\n@function rem($target, $context: $base-font-size) {\n   @if $target == 0 { @return 0 }\n   @return $target / $context + 0rem;\n}\n$base-font-size:16px;\n","$darkgray: #33363B;\n$orange: #FAB548;\n","footer{\n    margin-top: rem(60px);\n    background: #E1E1E1;\n    padding:20px 0 0 0;\n}\n\n.mission-statement{\n    @include span(4 of 12);\n}\n\n.copy{\n    background: $darkgray;\n    padding:20px 0;\n    margin-top: rem(60px);\n\n    p{\n        text-align: center;\n        color:#fff;\n        margin:0;\n        font-size: 11px;\n    }\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n"]}